apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'io.fabric'

project.ext {
    supportLibsVersion = "27.1.1"
    constraintLayoutVersion = "1.1.0"
    firebaseCoreVersion = "15.0.2"
    crashlyticsVersion = "2.9.2"
    daggerVersion = "2.13"
    timberVersion = "4.7.0"
    gmsVersion = "15.0.1"

    junitVersion = "4.12"
    mockitoVersion = "2.13.0"
    mockitoKotlinVersion = "1.5.0"
    robolectricVersion = "3.6.1"
}

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "com.jakdor.geosave"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        manifestPlaceholders = [crashlytics:getApiKey("crashlytics.key")]
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    //APP

    //Support libs
    implementation "com.android.support:appcompat-v7:$project.supportLibsVersion"
    implementation "com.android.support:support-v4:$project.supportLibsVersion"
    implementation "com.android.support:design:$project.supportLibsVersion"
    implementation "com.android.support.constraint:constraint-layout:$project.constraintLayoutVersion"

    //Firebase
    implementation "com.google.firebase:firebase-core:$project.firebaseCoreVersion"
    implementation "com.crashlytics.sdk.android:crashlytics:$project.crashlyticsVersion"

    //Dagger core
    kapt "com.google.dagger:dagger-compiler:$project.daggerVersion"
    implementation "com.google.dagger:dagger:$project.daggerVersion"

    //Dagger Android
    kapt "com.google.dagger:dagger-android-processor:$project.daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$project.daggerVersion"

    //Timber logger
    implementation "com.jakewharton.timber:timber:$project.timberVersion"

    //Google Play Services
    implementation "com.google.android.gms:play-services-location:$project.gmsVersion"

    //TESTS LOCAL

    //jUnit
    testImplementation "junit:junit:$project.junitVersion"

    //Mockito
    testImplementation "org.mockito:mockito-core:$project.mockitoVersion"

    //MockitoKotlin
    testImplementation "com.nhaarman:mockito-kotlin:$project.mockitoKotlinVersion"

    //Robolectric
    testImplementation "org.robolectric:robolectric:$project.robolectricVersion"
}

apply plugin: 'com.google.gms.google-services'

def getApiKey(String propertyName) {
    def propsFile = rootProject.file('apikeys.properties')
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        return props[propertyName]
    } else {
        return ""
    }
}
