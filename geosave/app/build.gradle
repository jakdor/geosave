/*
 * GeoSave - app for easy sharing and collaborating on GPS related data
 * Copyright (C) 2018  Jakub Dorda
 *
 * Software under GPLv3 licence - full copyright notice available at:
 * https://github.com/jakdor/geosave/blob/master/README.md
 */

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'io.fabric'

project.ext {
    supportLibsVersion = "27.1.1"
    archVersion = "1.1.1"
    databindingCompilerVersion = "3.1.4"
    constraintLayoutVersion = "1.1.3"
    firebaseCoreVersion = "16.0.3"
    firebaseFirestoreVersion = "17.1.0"
    crashlyticsVersion = "2.9.5"
    firebaseUIVersion = "4.1.0"
    daggerVersion = "2.13"
    rxKotlinVersion = "2.2.0"
    rxAndroidVersion = "2.0.1"
    timberVersion = "4.7.0"
    gmsVersion = "15.0.1"
    glideVersion = "4.4.0"
    retrofitVersion = "2.3.0"
    okHttpVersion = "3.9.1"
    fabMenuVersion = "1.10.1"
    leakCanaryVersion = "1.6.1"

    junitVersion = "4.12"
    mockitoVersion = "2.13.0"
    mockitoKotlinVersion = "1.5.0"
    robolectricVersion = "3.6.1"
    robolectricShadowsVersion = "3.3.2"
}

android {
    compileSdkVersion 27
    buildToolsVersion "27.0.3"
    defaultConfig {
        applicationId "com.jakdor.geosave"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        manifestPlaceholders = [crashlytics: getApiKey("crashlytics.key"), maps: getApiKey("maps.key")]
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions "version"
    productFlavors {
        dev {
            dimension "version"
            versionNameSuffix "-dev"
        }
        production {
            dimension "version"
            versionNameSuffix "-production"
        }
    }
    signingConfigs {
        debug {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file('debug.keystore')
            storePassword 'android'
        }
    }
    dataBinding {
        enabled = true
    }
    testOptions {
        unitTests {
            includeAndroidResources true
            returnDefaultValues true
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    //APP

    //Support libs
    implementation "com.android.support:appcompat-v7:$project.supportLibsVersion"
    implementation "com.android.support:support-v4:$project.supportLibsVersion"
    implementation "com.android.support:design:$project.supportLibsVersion"
    implementation "com.android.support:cardview-v7:$project.supportLibsVersion"
    implementation "com.android.support:preference-v7:$project.supportLibsVersion"
    implementation "com.android.support.constraint:constraint-layout:$project.constraintLayoutVersion"

    //android architecture
    kapt "android.arch.lifecycle:compiler:$project.archVersion"
    implementation "android.arch.lifecycle:extensions:$project.archVersion"
    implementation "android.arch.lifecycle:runtime:$project.archVersion"
    implementation "android.arch.core:core-testing:$project.archVersion"

    //data binding
    kapt "com.android.databinding:compiler:$project.databindingCompilerVersion"

    //Firebase
    implementation "com.google.firebase:firebase-core:$project.firebaseCoreVersion"
    implementation "com.google.firebase:firebase-firestore:$project.firebaseFirestoreVersion"
    implementation "com.crashlytics.sdk.android:crashlytics:$project.crashlyticsVersion"
    implementation "com.firebaseui:firebase-ui-auth:$project.firebaseUIVersion"

    //Dagger core
    kapt "com.google.dagger:dagger-compiler:$project.daggerVersion"
    implementation "com.google.dagger:dagger:$project.daggerVersion"

    //Dagger Android
    kapt "com.google.dagger:dagger-android-processor:$project.daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$project.daggerVersion"

    //RxKotlin
    implementation "io.reactivex.rxjava2:rxkotlin:$project.rxKotlinVersion"
    implementation "io.reactivex.rxjava2:rxandroid:$project.rxAndroidVersion"

    //Timber logger
    implementation "com.jakewharton.timber:timber:$project.timberVersion"

    //Google Play Services
    implementation "com.google.android.gms:play-services-location:$project.gmsVersion"
    implementation "com.google.android.gms:play-services-maps:$project.gmsVersion"

    //Glide
    kapt "com.github.bumptech.glide:compiler:$project.glideVersion"
    implementation "com.github.bumptech.glide:glide:$project.glideVersion"

    //retrofit
    implementation "com.squareup.retrofit2:converter-gson:$project.retrofitVersion"
    implementation "com.squareup.retrofit2:retrofit:$project.retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$project.retrofitVersion"

    //okHttp
    implementation "com.squareup.okhttp3:okhttp:$project.okHttpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$project.okHttpVersion"

    //fab menu
    implementation "com.getbase:floatingactionbutton:$project.fabMenuVersion"

    //LeakCanary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$project.leakCanaryVersion"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$project.leakCanaryVersion"
    debugImplementation "com.squareup.leakcanary:leakcanary-support-fragment:$project.leakCanaryVersion"

    //TESTS LOCAL

    //jUnit
    testImplementation "junit:junit:$project.junitVersion"

    //Mockito
    testImplementation "org.mockito:mockito-core:$project.mockitoVersion"

    //MockitoKotlin
    testImplementation "com.nhaarman:mockito-kotlin:$project.mockitoKotlinVersion"

    //Robolectric
    testImplementation "org.robolectric:robolectric:$project.robolectricVersion"
    testImplementation "org.robolectric:shadows-support-v4:$project.robolectricShadowsVersion"
}

apply plugin: 'com.google.gms.google-services'

def getApiKey(String propertyName) {
    def propsFile = rootProject.file('apikeys.properties')
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        return props[propertyName]
    } else {
        return ""
    }
}
